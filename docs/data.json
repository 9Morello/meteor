{
    "project": {
        "name": "The meteor-roles API",
        "description": "The meteor-roles API: an authorization package for Meteor",
        "version": "v4.0.0"
    },
    "files": {
        "roles/client/uiHelpers.js": {
            "name": "roles/client/uiHelpers.js",
            "modules": {
                "UIHelpers": 1
            },
            "classes": {},
            "fors": {
                "UIHelpers": 1
            },
            "namespaces": {}
        },
        "roles/roles_client.js": {
            "name": "roles/roles_client.js",
            "modules": {
                "Roles": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "roles/roles_common_async.js": {
            "name": "roles/roles_common_async.js",
            "modules": {},
            "classes": {
                "Roles": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "UIHelpers": {
            "name": "UIHelpers",
            "submodules": {},
            "elements": {},
            "classes": {
                "UIHelpers": 1
            },
            "fors": {
                "UIHelpers": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "roles/client/uiHelpers.js",
            "line": 3,
            "description": "Convenience functions for use on client.\n\nNOTE: You must restrict user actions on the server-side; any\nclient-side checks are strictly for convenience and must not be\ntrusted."
        },
        "Roles": {
            "name": "Roles",
            "submodules": {},
            "elements": {},
            "classes": {
                "Roles": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "roles/roles_common_async.js",
            "line": 41,
            "description": "Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.\n\nRoles are accessible through `Meteor.roles` collection and documents consist of:\n - `_id`: role name\n - `children`: list of subdocuments:\n   - `_id`\n\nChildren list elements are subdocuments so that they can be easier extended in the future or by plugins.\n\nRoles can have multiple parents and can be children (subroles) of multiple roles.\n\nExample: `{_id: 'admin', children: [{_id: 'editor'}]}`\n\nThe assignment of a role to a user is stored in a collection, accessible through `RoleAssignmentCollection`.\nIt's documents consist of\n - `_id`: Internal MongoDB id\n - `role`: A role object which got assigned. Usually only contains the `_id` property\n - `user`: A user object, usually only contains the `_id` property\n - `scope`: scope name\n - `inheritedRoles`: A list of all the roles objects inherited by the assigned role."
        }
    },
    "classes": {
        "UIHelpers": {
            "name": "UIHelpers",
            "shortname": "UIHelpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UIHelpers",
            "namespace": ""
        },
        "Roles": {
            "name": "Roles",
            "shortname": "Roles",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Roles",
            "namespace": "",
            "file": "roles/roles_common_async.js",
            "line": 41
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "roles/client/uiHelpers.js",
            "line": 23,
            "description": "UI helper to check if current user is in at least one\nof the target roles.  For use in client-side templates.",
            "example": [
                "\n    {{#if isInRole 'admin'}}\n    {{/if}}\n\n    {{#if isInRole 'editor,user'}}\n    {{/if}}\n\n    {{#if isInRole 'editor,user' 'scope1'}}\n    {{/if}}"
            ],
            "itemtype": "method",
            "name": "isInRole",
            "params": [
                {
                    "name": "role",
                    "description": "Name of role or comma-seperated list of roles.",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "Optional, name of scope to check.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if current user is in at least one of the target roles.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "UIHelpers",
            "module": "UIHelpers"
        },
        {
            "file": "roles/roles_client.js",
            "line": 40,
            "description": "Used as a global group (now scope) name. Not used anymore.",
            "itemtype": "property",
            "name": "GLOBAL_GROUP",
            "static": 1,
            "deprecated": true,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 49,
            "description": "Create a new role.",
            "itemtype": "method",
            "name": "createRole",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `unlessExists`: if `true`, exception will not be thrown in the role already exists",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "ID of the new role or null.",
                "type": "String"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 76,
            "description": "Delete an existing role.\n\nIf the role is set for any user, it is automatically unset.",
            "itemtype": "method",
            "name": "deleteRole",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 126,
            "description": "Rename an existing role.",
            "itemtype": "method",
            "name": "renameRole",
            "params": [
                {
                    "name": "oldName",
                    "description": "Old name of a role.",
                    "type": "String"
                },
                {
                    "name": "newName",
                    "description": "New name of a role.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 185,
            "description": "Add role parent to roles.\n\nPrevious parents are kept (role can have multiple parents). For users which have the\nparent role set, new subroles are added automatically.",
            "itemtype": "method",
            "name": "addRolesToParent",
            "params": [
                {
                    "name": "rolesNames",
                    "description": "Name(s) of role(s).",
                    "type": "Array|String"
                },
                {
                    "name": "parentName",
                    "description": "Name of parent role.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 205,
            "itemtype": "method",
            "name": "_addRoleToParent",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                },
                {
                    "name": "parentName",
                    "description": "Name of parent role.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 254,
            "description": "Remove role parent from roles.\n\nOther parents are kept (role can have multiple parents). For users which have the\nparent role set, removed subrole is removed automatically.",
            "itemtype": "method",
            "name": "removeRolesFromParent",
            "params": [
                {
                    "name": "rolesNames",
                    "description": "Name(s) of role(s).",
                    "type": "Array|String"
                },
                {
                    "name": "parentName",
                    "description": "Name of parent role.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 274,
            "itemtype": "method",
            "name": "_removeRoleFromParent",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                },
                {
                    "name": "parentName",
                    "description": "Name of parent role.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 323,
            "description": "Add users to roles.\n\nAdds roles to existing roles for each user.",
            "example": [
                "\n    Roles.addUsersToRoles(userId, 'admin')\n    Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')\n    Roles.addUsersToRoles([user1, user2], ['user','editor'])\n    Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')"
            ],
            "itemtype": "method",
            "name": "addUsersToRoles",
            "params": [
                {
                    "name": "users",
                    "description": "User ID(s) or object(s) with an `_id` field.",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to add users to. Roles have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope, or `null` for the global role\n  - `ifExists`: if `true`, do not throw an exception if the role does not exist\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 375,
            "description": "Set users' roles.\n\nReplaces all existing roles with a new set of roles.",
            "example": [
                "\n    Roles.setUserRoles(userId, 'admin')\n    Roles.setUserRoles(userId, ['view-secrets'], 'example.com')\n    Roles.setUserRoles([user1, user2], ['user','editor'])\n    Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')"
            ],
            "itemtype": "method",
            "name": "setUserRoles",
            "params": [
                {
                    "name": "users",
                    "description": "User ID(s) or object(s) with an `_id` field.",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to add users to. Roles have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope, or `null` for the global role\n  - `anyScope`: if `true`, remove all roles the user has, of any scope, if `false`, only the one in the same scope\n  - `ifExists`: if `true`, do not throw an exception if the role does not exist\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 437,
            "description": "Add one user to one role.",
            "itemtype": "method",
            "name": "_addUserToRole",
            "params": [
                {
                    "name": "userId",
                    "description": "The user ID.",
                    "type": "String"
                },
                {
                    "name": "roleName",
                    "description": "Name of the role to add the user to. The role have to exist.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope, or `null` for the global role\n  - `ifExists`: if `true`, do not throw an exception if the role does not exist",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 491,
            "description": "Returns an array of role names the given role name is a child of.",
            "example": [
                "\n    Roles._getParentRoleNames({ _id: 'admin', children; [] })"
            ],
            "itemtype": "method",
            "name": "_getParentRoleNames",
            "params": [
                {
                    "name": "role",
                    "description": "The role object",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 520,
            "description": "Returns an array of role names the given role name is a parent of.",
            "example": [
                "\n    Roles._getInheritedRoleNames({ _id: 'admin', children; [] })"
            ],
            "itemtype": "method",
            "name": "_getInheritedRoleNames",
            "params": [
                {
                    "name": "role",
                    "description": "The role object",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 547,
            "description": "Remove users from assigned roles.",
            "example": [
                "\n    Roles.removeUsersFromRoles(userId, 'admin')\n    Roles.removeUsersFromRoles([userId, user2], ['editor'])\n    Roles.removeUsersFromRoles(userId, ['user'], 'group1')"
            ],
            "itemtype": "method",
            "name": "removeUsersFromRoles",
            "params": [
                {
                    "name": "users",
                    "description": "User ID(s) or object(s) with an `_id` field.",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to remove users from. Roles have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope, or `null` for the global role\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 593,
            "description": "Remove one user from one role.",
            "itemtype": "method",
            "name": "_removeUserFromRole",
            "params": [
                {
                    "name": "userId",
                    "description": "The user ID.",
                    "type": "String"
                },
                {
                    "name": "roleName",
                    "description": "Name of the role to add the user to. The role have to exist.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope, or `null` for the global role\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 623,
            "description": "Check if user has specified roles.",
            "example": [
                "\n    // global roles\n    Roles.userIsInRole(user, 'admin')\n    Roles.userIsInRole(user, ['admin','editor'])\n    Roles.userIsInRole(userId, 'admin')\n    Roles.userIsInRole(userId, ['admin','editor'])\n\n    // scope roles (global roles are still checked)\n    Roles.userIsInRole(user, 'admin', 'group1')\n    Roles.userIsInRole(userId, ['admin','editor'], 'group1')\n    Roles.userIsInRole(userId, ['admin','editor'], {scope: 'group1'})"
            ],
            "itemtype": "method",
            "name": "userIsInRole",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or an actual user object.",
                    "type": "String|Object"
                },
                {
                    "name": "roles",
                    "description": "Name of role or an array of roles to check against. If array,\n                            will return `true` if user is in _any_ role.\n                            Roles do not have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope; if supplied, limits check to just that scope\n    the user's global roles will always be checked whether scope is specified or not\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if user is in _any_ of the target roles",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 691,
            "description": "Retrieve user's roles.",
            "itemtype": "method",
            "name": "getRolesForUser",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or an actual user object.",
                    "type": "String|Object"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of scope to provide roles for; if not specified, global roles are returned\n  - `anyScope`: if set, role can be in any scope (`scope` and `onlyAssigned` options are ignored)\n  - `onlyScoped`: if set, only roles in the specified scope are returned\n  - `onlyAssigned`: return only assigned roles and not automatically inferred (like subroles)\n  - `fullObjects`: return full roles objects (`true`) or just names (`false`) (`onlyAssigned` option is ignored) (default `false`)\n    If you have a use-case for this option, please file a feature-request. You shouldn't need to use it as it's\n    result strongly dependent on the internal data structure of this plugin.\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of user's roles, unsorted.",
                "type": "Array"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 767,
            "description": "Retrieve cursor of all existing roles.",
            "itemtype": "method",
            "name": "getAllRoles",
            "params": [
                {
                    "name": "queryOptions",
                    "description": "Options which are passed directly\n                               through to `RolesCollection.find(query, options)`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Cursor of existing roles.",
                "type": "Cursor"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 782,
            "description": "Retrieve all users who are in target role.\n\nOptions:",
            "itemtype": "method",
            "name": "getUsersInRole",
            "params": [
                {
                    "name": "roles",
                    "description": "Name of role or an array of roles. If array, users\n                            returned will have at least one of the roles\n                            specified but need not have _all_ roles.\n                            Roles do not have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope to restrict roles to; user's global\n    roles will also be checked\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n  - `onlyScoped`: if set, only roles in the specified scope are returned\n  - `queryOptions`: options which are passed directly\n    through to `Meteor.users.find(query, options)`\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                },
                {
                    "name": "queryOptions",
                    "description": "Options which are passed directly\n                               through to `Meteor.users.find(query, options)`",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Cursor of users in roles.",
                "type": "Cursor"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 812,
            "description": "Retrieve all assignments of a user which are for the target role.\n\nOptions:",
            "itemtype": "method",
            "name": "getUserAssignmentsForRole",
            "params": [
                {
                    "name": "roles",
                    "description": "Name of role or an array of roles. If array, users\n                            returned will have at least one of the roles\n                            specified but need not have _all_ roles.\n                            Roles do not have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope to restrict roles to; user's global\n    roles will also be checked\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n  - `queryOptions`: options which are passed directly\n    through to `RoleAssignmentCollection.find(query, options)`\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Cursor of user assignments for roles.",
                "type": "Cursor"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 844,
            "itemtype": "method",
            "name": "_getUsersInRoleCursor",
            "params": [
                {
                    "name": "roles",
                    "description": "Name of role or an array of roles. If array, ids of users are\n                            returned which have at least one of the roles\n                            assigned but need not have _all_ roles.\n                            Roles do not have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope to restrict roles to; user's global\n    roles will also be checked\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "Options which are passed directly\n                               through to `RoleAssignmentCollection.find(query, options)`",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Cursor to the assignment documents",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 892,
            "description": "Deprecated. Use `getScopesForUser` instead.",
            "itemtype": "method",
            "name": "getGroupsForUser",
            "static": 1,
            "deprecated": true,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 908,
            "description": "Retrieve users scopes, if any.",
            "itemtype": "method",
            "name": "getScopesForUser",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or an actual user object.",
                    "type": "String|Object"
                },
                {
                    "name": "roles",
                    "description": "Name of roles to restrict scopes to.",
                    "type": "Array|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of user's scopes, unsorted.",
                "type": "Array"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 945,
            "description": "Rename a scope.\n\nRoles assigned with a given scope are changed to be under the new scope.",
            "itemtype": "method",
            "name": "renameScope",
            "params": [
                {
                    "name": "oldName",
                    "description": "Old name of a scope.",
                    "type": "String"
                },
                {
                    "name": "newName",
                    "description": "New name of a scope.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 974,
            "description": "Remove a scope.\n\nRoles assigned with a given scope are removed.",
            "itemtype": "method",
            "name": "removeScope",
            "params": [
                {
                    "name": "name",
                    "description": "The name of a scope.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 989,
            "description": "Throw an exception if `roleName` is an invalid role name.",
            "itemtype": "method",
            "name": "_checkRoleName",
            "params": [
                {
                    "name": "roleName",
                    "description": "A role name to match against.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 1003,
            "description": "Find out if a role is an ancestor of another role.\n\nWARNING: If you check this on the client, please make sure all roles are published.",
            "itemtype": "method",
            "name": "isParentOf",
            "params": [
                {
                    "name": "parentRoleName",
                    "description": "The role you want to research.",
                    "type": "String"
                },
                {
                    "name": "childRoleName",
                    "description": "The role you expect to be among the children of parentRoleName.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 1044,
            "description": "Normalize options.",
            "itemtype": "method",
            "name": "_normalizeOptions",
            "params": [
                {
                    "name": "options",
                    "description": "Options to normalize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Normalized options.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 1065,
            "description": "Normalize scope name.",
            "itemtype": "method",
            "name": "_normalizeScopeName",
            "params": [
                {
                    "name": "scopeName",
                    "description": "A scope name to normalize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Normalized scope name.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_client.js",
            "line": 1083,
            "description": "Throw an exception if `scopeName` is an invalid scope name.",
            "itemtype": "method",
            "name": "_checkRoleName",
            "params": [
                {
                    "name": "scopeName",
                    "description": "A scope name to match against.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 50,
            "description": "Helper, resolves async some",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "predicate",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<Boolean>"
            },
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 64,
            "description": "Used as a global group (now scope) name. Not used anymore.",
            "itemtype": "property",
            "name": "GLOBAL_GROUP",
            "static": 1,
            "deprecated": true,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 73,
            "description": "Create a new role.",
            "itemtype": "method",
            "name": "createRoleAsync",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `unlessExists`: if `true`, exception will not be thrown in the role already exists",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "ID of the new role or null.",
                "type": "Promise<String>"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 118,
            "description": "Delete an existing role.\n\nIf the role is set for any user, it is automatically unset.",
            "itemtype": "method",
            "name": "deleteRoleAsync",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 184,
            "description": "Rename an existing role.",
            "itemtype": "method",
            "name": "renameRoleAsync",
            "params": [
                {
                    "name": "oldName",
                    "description": "Old name of a role.",
                    "type": "String"
                },
                {
                    "name": "newName",
                    "description": "New name of a role.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 256,
            "description": "Add role parent to roles.\n\nPrevious parents are kept (role can have multiple parents). For users which have the\nparent role set, new subroles are added automatically.",
            "itemtype": "method",
            "name": "addRolesToParentAsync",
            "params": [
                {
                    "name": "rolesNames",
                    "description": "Name(s) of role(s).",
                    "type": "Array|String"
                },
                {
                    "name": "parentName",
                    "description": "Name of parent role.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 277,
            "itemtype": "method",
            "name": "_addRoleToParentAsync",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                },
                {
                    "name": "parentName",
                    "description": "Name of parent role.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 341,
            "description": "Remove role parent from roles.\n\nOther parents are kept (role can have multiple parents). For users which have the\nparent role set, removed subrole is removed automatically.",
            "itemtype": "method",
            "name": "removeRolesFromParentAsync",
            "params": [
                {
                    "name": "rolesNames",
                    "description": "Name(s) of role(s).",
                    "type": "Array|String"
                },
                {
                    "name": "parentName",
                    "description": "Name of parent role.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 362,
            "itemtype": "method",
            "name": "_removeRoleFromParentAsync",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                },
                {
                    "name": "parentName",
                    "description": "Name of parent role.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 433,
            "description": "Add users to roles.\n\nAdds roles to existing roles for each user.",
            "example": [
                "\n    Roles.addUsersToRolesAsync(userId, 'admin')\n    Roles.addUsersToRolesAsync(userId, ['view-secrets'], 'example.com')\n    Roles.addUsersToRolesAsync([user1, user2], ['user','editor'])\n    Roles.addUsersToRolesAsync([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')"
            ],
            "itemtype": "method",
            "name": "addUsersToRolesAsync",
            "params": [
                {
                    "name": "users",
                    "description": "User ID(s) or object(s) with an `_id` field.",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to add users to. Roles have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope, or `null` for the global role\n  - `ifExists`: if `true`, do not throw an exception if the role does not exist",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Alternatively, it can be a scope name string.",
                "type": "Promise"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 489,
            "description": "Set users' roles.\n\nReplaces all existing roles with a new set of roles.",
            "example": [
                "\n    await Roles.setUserRolesAsync(userId, 'admin')\n    await Roles.setUserRolesAsync(userId, ['view-secrets'], 'example.com')\n    await Roles.setUserRolesAsync([user1, user2], ['user','editor'])\n    await Roles.setUserRolesAsync([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')"
            ],
            "itemtype": "method",
            "name": "setUserRolesAsync",
            "params": [
                {
                    "name": "users",
                    "description": "User ID(s) or object(s) with an `_id` field.",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to add users to. Roles have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope, or `null` for the global role\n  - `anyScope`: if `true`, remove all roles the user has, of any scope, if `false`, only the one in the same scope\n  - `ifExists`: if `true`, do not throw an exception if the role does not exist",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Alternatively, it can be a scope name string.",
                "type": "Promise"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 555,
            "description": "Add one user to one role.",
            "itemtype": "method",
            "name": "_addUserToRoleAsync",
            "params": [
                {
                    "name": "userId",
                    "description": "The user ID.",
                    "type": "String"
                },
                {
                    "name": "roleName",
                    "description": "Name of the role to add the user to. The role have to exist.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope, or `null` for the global role\n  - `ifExists`: if `true`, do not throw an exception if the role does not exist",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 651,
            "description": "Returns an array of role names the given role name is a child of.",
            "example": [
                "\n    Roles._getParentRoleNamesAsync({ _id: 'admin', children; [] })"
            ],
            "itemtype": "method",
            "name": "_getParentRoleNamesAsync",
            "params": [
                {
                    "name": "role",
                    "description": "The role object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 683,
            "description": "Returns an array of role names the given role name is a parent of.",
            "example": [
                "\n    Roles._getInheritedRoleNames({ _id: 'admin', children; [] })"
            ],
            "itemtype": "method",
            "name": "_getInheritedRoleNames",
            "params": [
                {
                    "name": "role",
                    "description": "The role object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 716,
            "description": "Remove users from assigned roles.",
            "example": [
                "\n    await Roles.removeUsersFromRolesAsync(userId, 'admin')\n    await Roles.removeUsersFromRolesAsync([userId, user2], ['editor'])\n    await Roles.removeUsersFromRolesAsync(userId, ['user'], 'group1')"
            ],
            "itemtype": "method",
            "name": "removeUsersFromRolesAsync",
            "params": [
                {
                    "name": "users",
                    "description": "User ID(s) or object(s) with an `_id` field.",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to remove users from. Roles have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope, or `null` for the global role\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Alternatively, it can be a scope name string.",
                "type": "Promise"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 763,
            "description": "Remove one user from one role.",
            "itemtype": "method",
            "name": "_removeUserFromRoleAsync",
            "params": [
                {
                    "name": "userId",
                    "description": "The user ID.",
                    "type": "String"
                },
                {
                    "name": "roleName",
                    "description": "Name of the role to add the user to. The role have to exist.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope, or `null` for the global role\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 794,
            "description": "Check if user has specified roles.",
            "example": [
                "\n    // global roles\n    await Roles.userIsInRoleAsync(user, 'admin')\n    await Roles.userIsInRoleAsync(user, ['admin','editor'])\n    await Roles.userIsInRoleAsync(userId, 'admin')\n    await Roles.userIsInRoleAsync(userId, ['admin','editor'])\n\n    // scope roles (global roles are still checked)\n    await Roles.userIsInRoleAsync(user, 'admin', 'group1')\n    await Roles.userIsInRoleAsync(userId, ['admin','editor'], 'group1')\n    await Roles.userIsInRoleAsync(userId, ['admin','editor'], {scope: 'group1'})"
            ],
            "itemtype": "method",
            "name": "userIsInRoleAsync",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or an actual user object.",
                    "type": "String|Object"
                },
                {
                    "name": "roles",
                    "description": "Name of role or an array of roles to check against. If array,\n                            will return `true` if user is in _any_ role.\n                            Roles do not have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope; if supplied, limits check to just that scope\n    the user's global roles will always be checked whether scope is specified or not\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if user is in _any_ of the target roles",
                "type": "Promise<Boolean>"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 871,
            "description": "Retrieve user's roles.",
            "itemtype": "method",
            "name": "getRolesForUserAsync",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or an actual user object.",
                    "type": "String|Object"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of scope to provide roles for; if not specified, global roles are returned\n  - `anyScope`: if set, role can be in any scope (`scope` and `onlyAssigned` options are ignored)\n  - `onlyScoped`: if set, only roles in the specified scope are returned\n  - `onlyAssigned`: return only assigned roles and not automatically inferred (like subroles)\n  - `fullObjects`: return full roles objects (`true`) or just names (`false`) (`onlyAssigned` option is ignored) (default `false`)\n    If you have a use-case for this option, please file a feature-request. You shouldn't need to use it as it's\n    result strongly dependent on the internal data structure of this plugin.\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of user's roles, unsorted.",
                "type": "Promise<Array>"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 956,
            "description": "Retrieve cursor of all existing roles.",
            "itemtype": "method",
            "name": "getAllRoles",
            "params": [
                {
                    "name": "queryOptions",
                    "description": "Options which are passed directly\n                               through to `RolesCollection.find(query, options)`.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Cursor of existing roles.",
                "type": "Cursor"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 971,
            "description": "Retrieve all users who are in target role.\n\nOptions:",
            "itemtype": "method",
            "name": "getUsersInRoleAsync",
            "params": [
                {
                    "name": "roles",
                    "description": "Name of role or an array of roles. If array, users\n                            returned will have at least one of the roles\n                            specified but need not have _all_ roles.\n                            Roles do not have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope to restrict roles to; user's global\n    roles will also be checked\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n  - `onlyScoped`: if set, only roles in the specified scope are returned\n  - `queryOptions`: options which are passed directly\n    through to `Meteor.users.find(query, options)`\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                },
                {
                    "name": "queryOptions",
                    "description": "Options which are passed directly\n                               through to `Meteor.users.find(query, options)`",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Cursor of users in roles.",
                "type": "Promise<Cursor>"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 1006,
            "description": "Retrieve all assignments of a user which are for the target role.\n\nOptions:",
            "itemtype": "method",
            "name": "getUserAssignmentsForRole",
            "params": [
                {
                    "name": "roles",
                    "description": "Name of role or an array of roles. If array, users\n                            returned will have at least one of the roles\n                            specified but need not have _all_ roles.\n                            Roles do not have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope to restrict roles to; user's global\n    roles will also be checked\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n  - `queryOptions`: options which are passed directly\n    through to `RoleAssignmentCollection.find(query, options)`\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Cursor of user assignments for roles.",
                "type": "Cursor"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 1041,
            "itemtype": "method",
            "name": "_getUsersInRoleCursor",
            "params": [
                {
                    "name": "roles",
                    "description": "Name of role or an array of roles. If array, ids of users are\n                            returned which have at least one of the roles\n                            assigned but need not have _all_ roles.\n                            Roles do not have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `scope`: name of the scope to restrict roles to; user's global\n    roles will also be checked\n  - `anyScope`: if set, role can be in any scope (`scope` option is ignored)\n\nAlternatively, it can be a scope name string.",
                    "type": "Object|String",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "Options which are passed directly\n                               through to `RoleAssignmentCollection.find(query, options)`",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Cursor to the assignment documents",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 1097,
            "description": "Deprecated. Use `getScopesForUser` instead.",
            "itemtype": "method",
            "name": "getGroupsForUserAsync",
            "return": {
                "description": "",
                "type": "Promise<Array>"
            },
            "static": 1,
            "deprecated": true,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 1117,
            "description": "Retrieve users scopes, if any.",
            "itemtype": "method",
            "name": "getScopesForUserAsync",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or an actual user object.",
                    "type": "String|Object"
                },
                {
                    "name": "roles",
                    "description": "Name of roles to restrict scopes to.",
                    "type": "Array|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of user's scopes, unsorted.",
                "type": "Promise<Array>"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 1158,
            "description": "Rename a scope.\n\nRoles assigned with a given scope are changed to be under the new scope.",
            "itemtype": "method",
            "name": "renameScopeAsync",
            "params": [
                {
                    "name": "oldName",
                    "description": "Old name of a scope.",
                    "type": "String"
                },
                {
                    "name": "newName",
                    "description": "New name of a scope.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 1192,
            "description": "Remove a scope.\n\nRoles assigned with a given scope are removed.",
            "itemtype": "method",
            "name": "removeScopeAsync",
            "params": [
                {
                    "name": "name",
                    "description": "The name of a scope.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 1208,
            "description": "Throw an exception if `roleName` is an invalid role name.",
            "itemtype": "method",
            "name": "_checkRoleName",
            "params": [
                {
                    "name": "roleName",
                    "description": "A role name to match against.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 1226,
            "description": "Find out if a role is an ancestor of another role.\n\nWARNING: If you check this on the client, please make sure all roles are published.",
            "itemtype": "method",
            "name": "isParentOfAsync",
            "params": [
                {
                    "name": "parentRoleName",
                    "description": "The role you want to research.",
                    "type": "String"
                },
                {
                    "name": "childRoleName",
                    "description": "The role you expect to be among the children of parentRoleName.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 1268,
            "description": "Normalize options.",
            "itemtype": "method",
            "name": "_normalizeOptions",
            "params": [
                {
                    "name": "options",
                    "description": "Options to normalize.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Normalized options.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 1291,
            "description": "Normalize scope name.",
            "itemtype": "method",
            "name": "_normalizeScopeName",
            "params": [
                {
                    "name": "scopeName",
                    "description": "A scope name to normalize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Normalized scope name.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common_async.js",
            "line": 1309,
            "description": "Throw an exception if `scopeName` is an invalid scope name.",
            "itemtype": "method",
            "name": "_checkScopeName",
            "params": [
                {
                    "name": "scopeName",
                    "description": "A scope name to match against.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:50"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:118"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:184"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:256"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:277"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:341"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:362"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:433"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:489"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:555"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:651"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:683"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:716"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:763"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:1097"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:1158"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:1192"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " roles/roles_common_async.js:1226"
        },
        {
            "message": "Missing item type\nHelper, resolves async some",
            "line": " roles/roles_common_async.js:50"
        }
    ]
}